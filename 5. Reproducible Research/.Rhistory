Diff <- HBM_height-ASIC_height
print ((length(Diff[Diff>0])/rep)*100)
0.053/(3*HBM_std)
ASIC_cpk <- 0.75
rep <- 10000
HBM_nominal <- 0.942
HBM_usl <- 0.053
HBM_lsl <- 0.054
HBM_cpk <- 0.75
HBM_std <- min(HBM_usl/(3*HBM_cpk), HBM_lsl/(3*HBM_cpk))
HBM_height <- rnorm(rep, mean= HBM_nominal, sd=HBM_std)
ASIC_nominal <- 0.974
ASIC_usl <- 0.02
ASIC_lsl <- 0.023
ASIC_cpk <- 0.75
ASIC_std <- min(ASIC_usl/(3*ASIC_cpk), ASIC_lsl/(3*ASIC_cpk))
ASIC_height <- rnorm(rep, mean = ASIC_nominal, sd = ASIC_std)
Diff <- HBM_height-ASIC_height
print ((length(Diff[Diff>0])/rep)*100)
rep <- 10000
HBM_nominal <- 0.942
HBM_usl <- 0.053
HBM_lsl <- 0.054
HBM_cpk <- 1.00
HBM_std <- min(HBM_usl/(3*HBM_cpk), HBM_lsl/(3*HBM_cpk))
HBM_height <- rnorm(rep, mean= HBM_nominal, sd=HBM_std)
ASIC_nominal <- 0.974
ASIC_usl <- 0.02
ASIC_lsl <- 0.023
ASIC_cpk <- 1.00
ASIC_std <- min(ASIC_usl/(3*ASIC_cpk), ASIC_lsl/(3*ASIC_cpk))
ASIC_height <- rnorm(rep, mean = ASIC_nominal, sd = ASIC_std)
Diff <- HBM_height-ASIC_height
print ((length(Diff[Diff>0])/rep)*100)
rep <- 10000
HBM_nominal <- 0.942
HBM_usl <- 0.053
HBM_lsl <- 0.054
HBM_cpk <- 1.33
HBM_std <- min(HBM_usl/(3*HBM_cpk), HBM_lsl/(3*HBM_cpk))
HBM_height <- rnorm(rep, mean= HBM_nominal, sd=HBM_std)
ASIC_nominal <- 0.974
ASIC_usl <- 0.02
ASIC_lsl <- 0.023
ASIC_cpk <- 1.33
ASIC_std <- min(ASIC_usl/(3*ASIC_cpk), ASIC_lsl/(3*ASIC_cpk))
ASIC_height <- rnorm(rep, mean = ASIC_nominal, sd = ASIC_std)
Diff <- HBM_height-ASIC_height
print ((length(Diff[Diff>0])/rep)*100)
install.packages("lattice")
library(lattice)
library(datasets)
xyplot(Ozone~Wind, data=airquality)
airquality <- transform(airquality, Month = factor(Month))
airquality
str(airquality)
xyplot(Ozone~Wind|Month, data=airquality, layout =c(5,1))
x<-rnorm(100)
set.seed(10)
x<-rnorm(100)
f <- rep(0:1, each =50)
y <- x+f-f*x+rnorm(100, sd=0.5)
f <- factor(f, label=c("Group 1", "Group 2"))
xyplot(y~x | f, layout =c(2,1))
xyplot(y~x | f, panel = function(x,y, ...){
panel.xyplot(x,y, ...)
panel.abline(h=median(y), lty=2)
})
panel.lmline(x,y, col=2)
xyplot(y~x | f, panel = function(x,y, ...){
panel.xyplot(x,y, ...)
panel.lmline(x,y, col=2)
})
/lattice
?lattice
?axis
?panel
library(lattice)
?panel
?panel.axis()
?panel.lines
?splom()
library(ggplot2)
str(mpg)
library(ggplot2)
str(mpg)
mpg$manufacturer <- factor(mpg$manufacturer)
str(mpg)
mpg$model <- factor(mpg$model)
mpg$trans <- mpg$trans
mpg$trans <- factor(mpg$trans)
str(mpg)
qplot(displ, hwy, data=mpg)
mpg$drv <- factor(mpg$drv)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color =drv)
qplot(displ, hwy, data=mpg, geom = ("point", "smooth"))
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data=mpg, color =drv)
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"))
qplot(hwy, data=mpg, fill=drv)
qplot(hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(displ, hwy, data=mpg, facets=drv~., binwidth=2)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
str(maacs)
dataset(maac)
datasets(maacs)
dataset(maacs)
swirl()
library(swirl
)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind, airquality, pch=8, col="red" main="Big Apple Data")
xyplot(Ozone~Wind, airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind|as.factor(month), airquality)
xyplot(Ozone~Wind|as.factor(Month), airquality, layout =c(5,1))
xyplot(Ozone~Wind|Month, airquality, layout =c(5,1))
p <- xyplot(Ozone~Wind, data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f)
xyplot(y~x|f, layout=c(2,1))
v1
v1
v2
myedit("plot1.R")
pathofile("plot1.R", local=TRUE)
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R", set=TRUE)
?pathtofile
names(pathtofile)
source(pathtofile("plot1.R", local=TRUE))
source(pathtofile("plot1.R"), local=TRUE))
source(pathtofile("plot1.R"), local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat|color*cut, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat|color*cut,diamonds, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat|color*cut,diamonds, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
swirl()
library(swirl)
swirl()
sample(colorS(), 10)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal
pal(0)
par(1)
pal(1)
pal(seq(0,1,len-6))
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <-colorRampPalette(c("red", "yellow"))
p2
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha=0.5)
p3(5)
swirl()
library(swirl)
swirl()
exit()
swirl()
sample(colors())
sample(colors(),10)
colorRamp(c("red", "blue"))
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red, "blue))
p1 <- colorRampPalette(c("red, "blue""))
p1 <- colorRampPalette(c("red, "blue"))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
p1(1)
0xcc
p1 <- colorRampPalette(c("red", "yellow"))
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"))
p3 <- colorRampPalette(c("blue", "green"), alpha=.5)
p3(5)
plot(x,y,pch=19, col=rgb(0,0.5,0.5))
plot(x,y,pch=19, col=rgb(0,0.5,0.5, 0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data =mpg)
qplot(displ, hwy, data =mpg, color=drv)
qplot(displ, hwy, data =mpg, color=drv, geom = c("point", smooth))
qplot(displ, hwy, data =mpg, color=drv, geom = c("point", "smooth"))
qplot(y=hwy, data =mpg, color=drv)
myhigh
qplot(drv, hwy, mpg, geom="boxplot")
qplot(drv, hwy, data =mpg, geom="boxplot")
library(swirl)
swirl()
swirl()
qplot(driv, hwy, data=mpg, geom="boxplot", color=manufactuerer)
qplot(driv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=drv~.)
qplot(hwy, data=mpg, facets=drv~., bindwidth=2)
qplot(hwy, data=mpg, facets=drv ~., binwidth=2)
qplot(displ, hwy, data=mpg, geom =c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
g
summary(g)
print(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_prid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(size=4, alpha=1/2, aes(color=drv))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!", x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!") +labs=(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs=(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm")
g + geom_point(aes(color = drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx,myy, type="l", ylim=c(-3,3))
g <- ggplot(data=testdat, aes(myx, myy))
g+geom_line(0)
g+geom_line
g(0)+geom_line
?geom_line
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim= c(-3,3))
g <- ggplot(mpg, aes(displ, hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, bindwidth =18497/30)
qplot(price, data=diamonds, bindwidth=18497/30)
qplot(price,data=diamonds,binwidth=18497/30)]\
qplot(price,data=diamonds,binwidth=18497/30)]
qplot(price,data=diamonds,binwidth=18497/30)
brk.
brk
counts
qplot(price,data=diamonds,binwidth=18497/30, fill=cut())
qplot(price,data=diamonds,binwidth=18497/30, fill=cut
)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut)+geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut,facets=.~cut)+geom_smooth(method="lm")
g<- ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/2)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm=TRUE)
cutpoints
diamonds#car2 <- cut(diamonds$carat, cutpoints)
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/3)+facet_grid(cut~cars)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)_geom_smooth(method="lm", size=3, color="pink")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grd(.~cut)
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
swirl()
library(swirl)
library(swirl)
library('swirl')
library(swirl)
library(swirl)
install.packages("swirl")
library(swirl)
library("swirl", lib.loc="~/R/win-library/3.5")
remove.packages("swirl", lib="~/R/win-library/3.5")
install.packages("swirl")
library("swirl", lib.loc="~/R/win-library/3.5")
library("swirl")
remove.packages("swirl", lib="~/R/win-library/3.5")
install.packages("swirl")
package_version("swirl")
packageVersion("swirl")
library(swirl)
install.packages("bitops")
install.packages("bitops")
library(swirl)
library(swirl)
remove.packages(swirl)
remove.packages("swirl")
install.packages("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
install.packages("stringl")
install.packages("stringi")
library(swirl)
library(stringi)
library(stringi)
install.packages("stringi")
library(swirl)
ls()
rm(list=ls())
swril()
swirl()
dis(dataFrame)
dist(dataFrame)
hclust(distxy)
hc <-hclust(distxy)
hc
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(m)
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y, pch=19, cex=2,col=cols1[newClust])
taaply(x, newClus, mean)
tapply(x, newClus, mean)
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx, newClassRepresentation())
mdist(x,y,newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch=19, cex=2, col=cols1[newClust2])
taaply(x, newClust2, mean)
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kemeans(dataFrame, centers=3)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red","green"), pch=3, cex=3, lwd=3)
plot(x,y,col=kmean(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
swirl()
library(swirl)
swirl()
head(dataMatrix)
heamap(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
?source
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu*diag*t(matv)
matu%*%diag%*%t(matv)
scale(mat)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2<-svd(constantMatrix)
vd2$d
sd2$d
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$u %*% svd1$d[1] %*% svd1$d[1]
a1 <- svd1$u[,1] %*% svd1$d[1] %*% svd1$d[1]
a1 <- svd1$u[,1] %*% svd1$d[1] %*% t(svd1$v[,1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, ssd$subject==1)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12], maxCon)
)
?which.max
mdist <- dist(c(sub1[,10:12], sub1[,maxCon])
)
mdist <- dist(c(sub1[,10:12], sub1[,maxCon]))
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
sub[maxCon]
sub1[maxCon]
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562,563)], centers=6)
table(kCluster$cluster, sub1$activity)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562,563)], centers=6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying cluster")
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:2])
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnamesm '|')
cnames <- strsplit(cnamesm, '|')
cnames <- strsplit(cnamesm, "|")
cnames <- strsplit(cnamesm, "|", fixed =  TRUE)
cnames <- strsplit(cnames, "|", fixed =  TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
setwd("C:/Users/kshim/Documents/Coursera/datasciencecoursera/5. Reproducible Research")
install.packages("knitr")
library("knitr")
library("markdown")
