t <- 100
lambdavals <- seq(0.005, 0.1, by=0.01)
nosim<-1000
nosim<-1000
t <- 100
coverage <- sapply(lambdavals, function(lambda) {
lhats <- rpois(nosim, lambda=lambda*t)/t
ll <- lhats - qnorm(0.975)*sqrt(lhats/t)
ul <- lhats + qnorm(0.975)*sqrt(lhats/t)
mean(ll < lambda & ul > lambda)
})
plot(lambdavals, coverage, type="l")
abline(h=0.95, col="red")
plot(lambdavals, coverage, type="l")
library(UsingR)
knitr::opts_chunk$set(echo = TRUE)
data(sleep)
head(sleep)
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
mn + c(-1, 1)*qt(0.975,n-1)*s/sqrt(n)
g1 <- sleep$extra[1:10]; g2 <- sleep$extra[11:20]
mn <- mean(difference); s <- sd(difference); n <- 10
mn <- mean(difference); s <- sd(difference); n <- 10
difference
difference <- g2-g1
mn <- mean(difference); s <- sd(difference); n <- 10
mn + c(-1, 1)*qt(0.975,n-1)*s/sqrt(n)
data(sleep)
head(sleep)
difference <- g2-g1
mn <- mean(difference); s <- sd(difference); n <- 10
mn + c(-1, 1)*qt(0.975,n-1)*s/sqrt(n)
t.test(difference)
t.test(g2, g1, paired=T)
t.test(extra ~ I(relevel(group,2)), paried=T, data=sleep)
g1
g2
sleep[1:10]
head(sleep)
tail(sleep)
library(UsingR)
knitr::opts_chunk$set(echo = TRUE)
n_OC = 8
x_OC = 132.86
s_OC = 15.34
n_C = 21
x_OC = 127.44
s_OC = 18.23
n_oc = 8
s_oc = 15.34
x_c = 127.44
s_c = 18.23
sp = ((n_oc-1)*s_oc^2+(n_c-1)*s_c^2)/(n_oc+n_c-2)
n_oc = 8
x_oc = 132.86
s_oc = 15.34
n_c = 21
x_c = 127.44
s_c = 18.23
sp = ((n_oc-1)*s_oc^2+(n_c-1)*s_c^2)/(n_oc+n_c-2)
(n_oc-n_c)+c(-1,1)*qt(0.975, n_c+n_oc-2)*sp/(1/n_c+1/n_oc)^(1/2)
(x_oc-x_c)+c(-1,1)*qt(0.975, n_c+n_oc-2)*sp/(1/n_c+1/n_oc)^(1/2)
(x_oc-x_c)+c(-1,1)*qt(0.975, n_c+n_oc-2)*sp/sqrt(1/n_c+1/n_oc)
(x_oc-x_c)+c(-1,1)*qt(0.975, n_c+n_oc-2)*sp*sqrt(1/n_c+1/n_oc)
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2) / (8 + 21 - 2))
sp = sqrt(((n_oc-1)*s_oc^2+(n_c-1)*s_c^2)/(n_oc+n_c-2))
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2) / (8 + 21 - 2))
sp <- sqrt(((n_oc-1)*s_oc^2+(n_c-1)*s_c^2)/(n_oc+n_c-2))
(x_oc-x_c)+c(-1,1)*qt(0.975, n_c+n_oc-2)*sp*sqrt(1/n_c+1/n_oc)
sp <- sqrt( ((n1-1)*sd(x1)^2 + (n2-1)*sd(x2)^2)/(n1+n2-2))
n1 <- length(g1)
n2 <- length(g2)
data(sleep)
head(sleep)
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
g1 <- sleep$extra[1:10]; g2 <- sleep$extra[11:20]
difference <- g2-g1
mn <- mean(difference); s <- sd(difference); n <- 10
# t confidence interval with confidence level 95%
t.test(difference)
t.test(g2, g1, paired=T)
# outcome is extra, extra is function the group, and the group are paired
t.test(extra ~ I(relevel(group,2)), paried=T, data=sleep)
n1 <- length(g1)
n2 <- length(g2)
sp <- sqrt( ((n1-1)*sd(x1)^2 + (n2-1)*sd(x2)^2)/(n1+n2-2))
md <- mean(g2)-mean(g1)
semd <- sq*sqrt(1/n1+1/n2)
rbind(
md+c(-1,1)*qt(0.975, n1+n2-2)*semd,
t.test(g2,g1, paired=FALSE, var.equal=TRUE)$conf,
t.test(g2, g1, paird=TRUE)$conf
)
semd <- sq*sqrt(1/n1+1/n2)
rbind(
md+c(-1,1)*qt(0.975, n1+n2-2)*semd,
t.test(g2,g1, paired=FALSE, var.equal=TRUE)$conf,
t.test(g2, g1, paird=TRUE)$conf
)
md <- mean(g2)-mean(g1)
semd <- sq*sqrt(1/n1+1/n2)
n1 <- length(g1)
n2 <- length(g2)
sp <- sqrt( ((n1-1)*sd(x1)^2 + (n2-1)*sd(x2)^2)/(n1+n2-2))
sp <- sqrt( ((n1-1)*sd(g1)^2 + (n2-1)*sd(g2)^2)/(n1+n2-2))
md <- mean(g2)-mean(g1)
semd <- sq*sqrt(1/n1+1/n2)
rbind(
md+c(-1,1)*qt(0.975, n1+n2-2)*semd,
t.test(g2,g1, paired=FALSE, var.equal=TRUE)$conf,
t.test(g2, g1, paird=TRUE)$conf
)
sp <- sqrt( ((n1-1)*sd(g1)^2 + (n2-1)*sd(g2)^2)/(n1+n2-2))
md <- mean(g2)-mean(g1)
semd <- sq*sqrt(1/n1+1/n2)
semd <- sp*sqrt(1/n1+1/n2)
rbind(
md+c(-1,1)*qt(0.975, n1+n2-2)*semd,
t.test(g2,g1, paired=FALSE, var.equal=TRUE)$conf,
t.test(g2, g1, paird=TRUE)$conf
)
g1 <- sleep$extra[1:10]; g2 <- sleep$extra[11:20]
difference <- g2-g1
n1 <- length(g1)
n2 <- length(g2)
sp <- sqrt( ((n1-1)*sd(g1)^2 + (n2-1)*sd(g2)^2)/(n1+n2-2))
md <- mean(g2)-mean(g1)
semd <- sp*sqrt(1/n1+1/n2)
rbind(
md+c(-1,1)*qt(0.975, n1+n2-2)*semd,
t.test(g2,g1, paired=FALSE, var.equal=TRUE)$conf,
t.test(g2, g1, paird=TRUE)$conf
)
rbind(
md+c(-1,1)*qt(0.975, n1+n2-2)*semd,
t.test(g2,g1, paired=FALSE, var.equal=TRUE)$conf,
t.test(g2, g1, paired=TRUE)$conf
)
library(datasets)
data("ChickWeight")
data(ChickWeight)
library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet+Chick~Time, value.var="weight")
wideCW
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
t.test(gain)
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
t.test(gain)
library(dplyr)
wideCW <- mutate(wideCW,
gain < time21 - time0
)
n <- length(gain)
x <- mean(gain)
head(wideCW)
wideCW <- mutate(wideCW,
gain <- time21 - time0
)
head(wideCW)
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
head(wideCW)
library(datasets)
data(ChickWeight)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet+Chick~Time, value.var="weight")
wideCW <- mutate(wideCW,
gain <- time21 - time0
)
head(wideCW)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet+Chick~Time, value.var="weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW,
gain <- time21 - time0
)
head(wideCW)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet+Chick~Time, value.var="weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
head(wideCW)
unique(gain$Diet)
unique(wideCW$Diet)
library(UsingR)
library(datasets)
library(dplyr)
library(reshape2)
knitr::opts_chunk$set(echo = TRUE)
#Let's compare 1st and 4th diet.
n_1 <- length(wideCW[diet==1,])
#Let's compare 1st and 4th diet.
n_1 <- length(wideCW(diet==1))
#Let's compare 1st and 4th diet.
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
#Let's compare 1st and 4th diet.
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
rbind(
t.test(gain~Diet, paired=F, var.equal=T, data=wideCW14)$conf,
t.test(gain~Diet, paired=F, var.equal=F, data=wideCW14)$conf
)
library(UsingR)
knitr::opts_chunk$set(echo = TRUE)
data(father.son)
t.test(father.son$sheight-father.son$fheight)
# t confidence interval with confidence level 95%
t.test(difference)
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
wideCW <- mutate(wideCW,
gain = time21 - time0
)
library(dplyr)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
wideCW <- mutate(wideCW,
gain = time21 - time0
)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
knitr::opts_chunk$set(echo = TRUE)
mu0=30
mu0=30
mua=32
sigma=4
sigma=4
alpha=0.05
z <- qnorm(1-alpha)
pnorm(mu0+z*sigma/sqrt(n), mean = mua, sd=sigma/sqrt(n), lower.tail=FALSE)
n=16
sigma=4
alpha=0.05
z <- qnorm(1-alpha)
pnorm(mu0+z*sigma/sqrt(n), mean = mua, sd=sigma/sqrt(n), lower.tail=FALSE)
pnorm(mu0+z*sigma/sqrt(n), mean = mu0, sd=sigma/sqrt(n), lower.tail=FALSE)
pnorm(mu0+z*sigma/sqrt(n), mean = mua, sd=sigma/sqrt(n), lower.tail=FALSE)
pnorm(mu0+z*sigma/sqrt(n), mean = mu0, sd=sigma/sqrt(n), lower.tail=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(reshape2)
library(reshape2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(reshape2)
mu0<-30
mua<-32
n<-16
sigma<-4
alpha<-0.05
z <- qnorm(1-alpha)
pnorm(mu0+z*sigma/sqrt(n), mean = mu0, sd=sigma/sqrt(n), lower.tail=FALSE)
pnorm(mu0+z*sigma/sqrt(n), mean = mua, sd=sigma/sqrt(n), lower.tail=FALSE)
nseq <- c(8, 16, 32, 64, 128)
mua <- seq(30, 35, by = 0.1)
z <- qnorm(.95)
power <- sapply(nseq, function(n)
pnorm(mu0 + z * sigma / sqrt(n), mean = mua, sd = sigma / sqrt(n),
lower.tail = FALSE)
)
colnames(power) <- paste("n", nseq, sep = "")
d <- data.frame(mua, power)
d
names(d2) <- c("mua", "n", "power")
d2 <- melt(d, id.vars = "mua")
names(d2) <- c("mua", "n", "power")
g <- ggplot(d2,
aes(x = mua, y = power, col = n)) + geom_line(size = 2)
g
# delta is the is the difference of the means. m-m0
power.t.test(n=16, delta=2, sd=4, type="one.sample", alt="one.sided")$power
# Different delta and sd, but same effect size.
power.t.test(n=16, delta=2/4, sd=1, type="one.sample", alt="one.sided")$power
# delta is the is the difference of the means. m-m0
power.t.test(power=0.8, delta=2, sd=4, type="one.sample", alt="one.sided")$power
# Different delta and sd, but same effect size.
power.t.test(power=0.8, delta=2/4, sd=1, type="one.sample", alt="one.sided")$power
# delta is the is the difference of the means. m-m0
power.t.test(power=0.8, delta=2, sd=4, type="one.sample", alt="one.sided")$n
# Different delta and sd, but same effect size.
power.t.test(power=0.8, delta=2/4, sd=1, type="one.sample", alt="one.sided")$n
power.t.test(power=0.8, delta=100, sd=200, type="one.sample", alt="one.sided")$n
knitr::opts_chunk$set(echo = TRUE)
set.seed(1010093)
pValues <- rep(NA, 1000)
for (i in 1:1000){
y <- rnorm(20)
x <- rnorm(20)
pvalues[i] <- summary(lm(y~x))$coeff[2,4]
}
pValues[i] <- summary(lm(y~x))$coeff[2,4]
summary(lm(y~x))$coeff
#Controls false positive rate
sum(pValues < 0.05)
for (i in 1:1000){
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y~x))$coeff[2,4]
}
for (i in 1:1000){
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y~x))$coeff[2,4]
}
#Controls false positive rate
sum(pValues < 0.05)
1000*0.05
set.seed(1010093)
pValues <- rep(NA, 1000)
for (i in 1:1000){
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y~x))$coeff[2,4]
}
for (i in 1:1000){
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y~x))$coeff[2,4]
}
#Controls false positive rate
sum(pValues < 0.05)
1000*0.05
set.seed(1010095)
pValues <- rep(NA, 1000)
for (i in 1:1000){
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y~x))$coeff[2,4]
}
for (i in 1:1000){
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y~x))$coeff[2,4]
}
#Controls false positive rate
sum(pValues < 0.05)
set.seed(1010092)
pValues <- rep(NA, 1000)
for (i in 1:1000){
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y~x))$coeff[2,4]
}
#Controls false positive rate
sum(pValues < 0.05)
# Controls FWER
sum(p.adjust(pValues, method='bonferroni') <0.05)
# Controls FDR
sum(p.adjust(pValues, method="BH")< 0.05)
set.seed(1010095)
pValues <- rep(NA, 1000)
for (i in 1:1000){
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y~x))$coeff[2,4]
}
for (i in 1:1000){
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y~x))$coeff[2,4]
}
#Controls false positive rate
sum(pValues < 0.05)
# Controls FWER
sum(p.adjust(pValues, method='bonferroni') <0.05)
# Controls FDR
sum(p.adjust(pValues, method="BH")< 0.05)
?rnorm
rnorm(20)
x
pValues <- rep(NA, 1000)
for (i in 1:1000){
x <- rnorm(20)
# first 500 beta=0, last 500 beta=2
if (i <=500){y <- rnorm(20)}
else {y <- rnorm(20, mean=2*x)}
pValues[i] <- summary(lm(y~x))$coeff[2,4]
}
trueStatus <- rep(c("zero", "not zero"), each=500)
table(pValues < 0.05, trueStatus)
#Controls false positive rate
sum(pValues < 0.05)
# Controls FWER
table(p.adjust(pValues, method='bonferroni') <0.05, trueStatus)
# Controls FDR
sum(p.adjust(pValues, method="BH")< 0.05, trueStatus)
# Controls FDR
table(p.adjust(pValues, method="BH")< 0.05, trueStatus)
plot(pValues, p.adjust(pValues, method='bonferroni'),pch=19)
plot(pValues, p.adjust(pValues, method='BH), pch=19)
par(mfrow=c(1,2))
plot(pValues, p.adjust(pValues, method='bonferroni'),pch=19)
plot(pValues, p.adjust(pValues, method='bonferroni'),pch=19)
plot(pValues, p.adjust(pValues, method='BH'), pch=19)
knitr::opts_chunk$set(echo = TRUE)
library(UsingR)
resamples <- matrix(sample(x, n*B, replace=TRUE), B, n)
#Consider a data set
data(father.son)
x<- father.son$sheight
n<-length(x)
B<-1000
resampleMedians <- apply(resamples, 1, median)
resamples <- matrix(sample(x, n*B, replace=TRUE), B, n)
resampleMedians <- apply(resamples, 1, median)
length(resampleMedians)
head(resamples)
length(resampleMedians)
?matrix
n
#Histogram of the resamples
g = ggplot(data.frame(x = resampledMedians), aes(x = x))
resampledMedians <- apply(resamples, 1, median)
#Histogram of the resamples
g = ggplot(data.frame(x = resampledMedians), aes(x = x))
g = g + geom_density(size = 2, fill = "red")
#g = g + geom_histogram(alpha = .20, binwidth=.3, colour = "black", fill = "blue", aes(y = ..density..))
g = g + geom_vline(xintercept = median(x), size = 2)
g
g = g + geom_histogram(alpha = .20, binwidth=.3, colour = "black", fill = "blue", aes(y = ..density..))
g = g + geom_vline(xintercept = median(x), size = 2)
g
#Histogram of the resamples
g = ggplot(data.frame(x = resampledMedians), aes(x = x))
g = g + geom_vline(xintercept = median(x), size = 2)
g
#Histogram of the resamples
g = ggplot(data.frame(x = resampledMedians), aes(x = x))
g = g + geom_density(size = 2, fill = "red")
g = g + geom_vline(xintercept = median(x), size = 2)
g
B <- 10000
resamples <- matrix(sample(x, n*B, replace=TRUE), B, n)
medians <- apply(resamples, 1, median)
sd(medians)
quantile(medians, c(0.025, 0.975))
#Histogram of boostrap resamples
g = ggplot(data.fram(medians=medians), aes(x=medians))
#Histogram of boostrap resamples
g = ggplot(data.frame(medians=medians), aes(x=medians))
g <- g+geom_histogram(color="black", fill="lightblue", binwidth=0.05)
g
#Histogram of boostrap resamples
g <- ggplot(data.frame(medians=medians), aes(x=medians))
g <- g+geom_histogram(color="black", fill="lightblue", binwidth=0.05)
g
knitr::opts_chunk$set(echo = TRUE)
library(UsingR)
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C"),]
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C"),]
y <- subdata$count
group <- as.character(subdata$spray)
head(group)
head(group)
head(y)
sample(group)
sample(group)
dim(sample(group))
permutations
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C"),]
y <- subdata$count
group <- as.character(subdata$spray)
testStat <- function(w, g) mean(w[g == "B"]) - mean(w[g == "C"])
observedStat <- testStat(y, group)
permutations <- sapply(1 : 10000, function(i) testStat(y, sample(group)))
observedStat
mean(permutations > observedStat)
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C"),]
y <- subdata$count
testStat <- function(w, g) mean(w[g == "B"]) - mean(w[g == "C"])
observedStat <- testStat(y, group)
permutations <- sapply(1 : 10000, function(i) testStat(y, sample(group)))
observedStat
mean(permutations > observedStat)
head(permutations)
sapply(1 : 10000, function(i) testStat(y, sample(group)))
?sample
length(group)
sample(group)
sample(group, 10000)
group
sample(group)
sample(group)
sample(group)
sample(group)
observedStat
#Permutation based p-values
mean(permutations > observedStat)
setwd("C:/Users/kshim/Documents/Coursera/datasciencecoursera/9. Data Product/Week1/Shiny2")
