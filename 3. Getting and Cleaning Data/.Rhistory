filter(pack_sum, unique >465)
top_unique <- filter(pack_sum, unique >465)
View(top_unique)
top_unique_sorted <-arrnage(top_unique, unique)
top_unique_sorted <-arrange(top_unique, unique)
top_unique_sorted <-arrange(top_unique, desc(unique))
View(top_uni
)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
?select
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id, country, package, size) %>%
print()
submit()
select(c(ip_id, country, package, size) %>%
submit()
?mutate
submit()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(desc(size_mb))
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students
str(students)
var(studetns)
var(students)
students2
gather(studetns2, sex_class, value)
gather(students2, sex_class, value)
gather(students2, sex_class, count)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data=rest, col=sex_class, into= c("sex, "class""))
separate(data=res, col=sex_class, into= c("sex, "class""))
separate(data=res, col=sex_class, into= c("sex, "class"))
separate(data=res, col=sex_class, into= c("sex", "class"))
submit()
students3
submit()
submit()
submit()
?gather
reset()
swril()
library(swirl)
swirl()
reset()
library(swirl)
swirl()
View(students3)
View(students3)
submit()
?spread
submit()
# This script builds on the previous one by appending
# a call to spread(), which will allow us to turn the
# values of the test column, midterm and final, into
# column headers (i.e. variables).
#
# You only need to specify two arguments to spread().
# Can you figure out what they are? (Hint: You don't
# have to specify the data argument since we're using
# the %>% operator.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, var) %>%
print
submit()
submit()
submit()
submit()
?gather
library(readr)
parse_number("class5")
?mutate
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class=parse_number(class))
print
submit()
submit()
submit()
submit()
submit()
students4
submit()
?distinct
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate( status = "passed")
failed <- failed %>% mutate( status = "failed")
?bind_rows()
bind_rows(passed, failed, id ="id")
bind_rows(passed, failed)
sat
sat %>%
select(-contains("total")) %>%
###gather(###, ###, -###) %>%
### <Your call to separate()> %>%
print
# find detailed in 'Special functions' section of ?select.
#
# 2. gather() all columns EXCEPT score_range, using
# key = part_sex and value = count.
#
# 3. separate() part_sex into two separate variables (columns),
# called "part" and "sex", respectively. You may need to check
# the 'Examples' section of ?separate to remember how the 'into'
# argument should be phrased.
#
sat %>%
select(-contains("total")) %>%
gather(key=part_sex, value =count, -score_range) %>%
### <Your call to separate()> %>%
print
?separate
# find detailed in 'Special functions' section of ?select.
#
# 2. gather() all columns EXCEPT score_range, using
# key = part_sex and value = count.
#
# 3. separate() part_sex into two separate variables (columns),
# called "part" and "sex", respectively. You may need to check
# the 'Examples' section of ?separate to remember how the 'into'
# argument should be phrased.
#
sat %>%
select(-contains("total")) %>%
gather(key=part_sex, value =count, -score_range) %>%
separate(part_sex, into=c(part, sex)) %>%
print
# find detailed in 'Special functions' section of ?select.
#
# 2. gather() all columns EXCEPT score_range, using
# key = part_sex and value = count.
#
# 3. separate() part_sex into two separate variables (columns),
# called "part" and "sex", respectively. You may need to check
# the 'Examples' section of ?separate to remember how the 'into'
# argument should be phrased.
#
sat %>%
select(-contains("total")) %>%
gather(key=part_sex, value =count, -score_range) %>%
separate(part_sex, into=c("part", "sex")) %>%
print
submit()
submit()
?group_by
submit()
submit()
submit()
View(sat)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count), prop=count/total) %>%
print
View(sat)
# Append two more function calls to accomplish the following:
#
# 1. Use group_by() (from dplyr) to group the data by part and
# sex, in that order.
#
# 2. Use mutate to add two new columns, whose values will be
# automatically computed group-by-group:
#
#   * total = sum(count)
#   * prop = count / total
#
sat<- sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count), prop=count/total) %>%
print
View(sat)
fileURL <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/cameras.csv",method="curl")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/cameras.csv",method="curl")
cameraData<- read.csv("./data/cameras/csv")
cameraData<- read.csv("./data/cameras.csv")
names(cameraData)
tolower(names(cameraData))
spliNames <- strsplit(names(cameraData),"\\.")
splitNames[[5]]
splitNames <- strsplit(names(cameraData),"\\.")
splitNames[[5]]
splitNames[[6]]
splitNames
length(splitNames[[6]])
mylist <- list(letters = c("A", "b", "c"), numbers= 1:3, matrix(1:25, ncol=5))
head(mylist)
mylist[[1]]
mylist[1]
mylist[1,1]
mylist[1][1]
mylist[1[1]]
mylist[1(1)]
mylist[1]
mylist[[1]]
mylist[[1][1]]
mylist[[1,1]
mylist[[1,1]]
splitNames[[6]][1]
mylist[[1]][1]
mylist[[1]][[1]]
mylist[1][1]
mylist[1][2]
class(mylist[1])
class(mylist)
mylist[1]
class(mylist[3])
class(mylist[2])
class(mylist[[1]])
class(mylist[[2]])
class(mylist[[3]])
class(mylist[[1]][1])
mylist[[1]]
class(mylist[[1]])
mylist <- list(letters = c("A", 3, "c"), numbers= 1:3, matrix(1:25, ncol=5))
mylist[1]
class(mylist[[1]])
class(mylist[[1]][1])
class(mylist[[1]][2])
mylist <- list(letters = c("A", "b", "c"), numbers= 1:3, matrix(1:25, ncol=5))
mylist[1]
class(mylist[[1]][1])
splitNames[[6]][1]
firstElement <- function(x){x[1]}
sapply(splitNames, firstElement)
reviews <- read.csv("./data/reviews/csv")
setwd("C:/Users/kshim/Documents/Coursera/datasciencecoursera/3. Getting and Cleaning Data")
reviews <- read.csv("./data/reviews/csv")
reviews <- read.csv("./data/reviews.csv")
solutions <- read.csv("./data/solutions.csv")
head(reviews, 2)
head(solutions, 2)
sub("_","", names(reviews),)
?sub
sub("_","", names(reviews))
testName <- "this_is_a_test"
sub("_","",testName)
gsub("_","",testName)
sub("_","",testName)
gsub("_","",testName)
grep("Alameda", cameraData$intersection)
table(grepl("Alameda", cameraData$intersection))
cameraData2 <- cameraData[!grepl("Alameda", cameraData$intersection),]
cameraData2
cameraData2 <- cameraData[grepl("Alameda", cameraData$intersection),]
cameraData2
grep("Alameda", cameraData$intersection)
grep("Alameda", cameraData$intersection, value=T)
grep("JeffStree", cameraData$intersection)
length(grep("JeffStreet", cameraData$intersection))
grep("JeffStreet", cameraData$intersection)
length(grep("JeffStreet", cameraData$intersection))
library(stringr)
nchar("Jeffrey Leek")
substr("Jeffrey Leek", 1,7)
paste("Jeffrey", "Leek")
paste0("Jeffrey", "Leek")
str_trim("Jeff         ")
d1 <-date()
d1
class(d1)
d2 <- Sys.Date()
d2
class(d2)
format(d2, "%a %b %d")
x <- c("1jan1960", "2jan1960", "31mar1960","30jul1960")
z <- asDate(x, "%d%b$Y")
z <- as.Date(x, "%d%b$Y")
z[1]-z[2]
z <- as.Date(x, "%d%b$Y")
z
x <- c("1jan1960", "2jan1960", "31mar1960","30jul1960")
z <- as.Date(x, "%d%b$Y")
z
z <- as.Date(x, "%d%b$Y")
x <- c("1jan1960", "2jan1960", "31mar1960","30jul1960")
x
z
z <- as.Date(x, "%d%b$Y")
z <- as.Date(x, "%d%b%Y")
z
z[1]-z[2]
as.numeric(z[1]-z[2])
weekdays(d2)
months(d2)
julian(d2)
library(lubridate)
install.packages("lubridate")
library(lubridate)
ymd("20140108")
mdy("08/04/2013")
dmy("03-04-2018")
ymd_hms("2011-08-03 10:15:03")
ymd_hms("2011-08-03", tz="Pacific/Auckland")
ymd_hms("2011-08-03", tz="Pacific/Auckland")
ymd_hms("2011-08-03", tz="Pacific")
ymd_hms("2011-08-03 10:15:03", tz="Pacific/Auckland")
?Sys.timezone
wday(x[1])
x <- dmy(c("1jan1960", "2jan1960", "31mar1960","30jul1960"))
wday(x[1])
wday(x[2])
wday(x[2], label+T)
wday(x[2], label=T)
download.file(fileUrl, destfile="./data/idaho.csv",method="curl")
cameraData<- read.csv("./data/idaho.csv")
idaho <- read.csv("./data/idaho.csv")
head(idaho)
str(idaho)
idaho <- read.csv("./data/idaho.csv", stringsAsFactors = F)
head(idaho)
str(idaho)
names(idaho)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./data/idaho.csv",method="curl")
idaho <- read.csv("./data/idaho.csv", stringsAsFactors = F)
download.file(fileUrl, destfile="./data/idaho.csv",method="curl")
idaho <- read.csv("./data/idaho.csv", stringsAsFactors = F)
names(idaho)
splitNames <- strsplit(names(idaho),"wgtp")
splitNames[[123]]
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl2, destfile="./data/gdp.csv",method="curl")
gdp <- read.csv("./data/gdp.csv", stringsAsFactors = F)
names(gdp)
head(gdp)
gdp <- read.csv("./data/gdp.csv", skip=3, stringsAsFactors = F)
head(gdp)
gdp <- read.csv("./data/gdp.csv", skip=5, stringsAsFactors = F)
names(gdp)
names(gdp) <- c("CountryCode", "Ranking","Country","Economy")
head(gdp)
gdp <- read.csv("./data/gdp.csv", skip=4,header=F stringsAsFactors = F)
names(gdp) <- c("CountryCode", "Ranking","Country","Economy")
gdp <- read.csv("./data/gdp.csv", skip=4,header=F, stringsAsFactors = F)
names(gdp) <- c("CountryCode", "Ranking","Country","Economy")
head(gdp)
gdp <- read.csv("./data/gdp.csv", skip=4,header=F, stringsAsFactors = F)[1:2]
names(gdp) <- c("CountryCode", "Ranking","Country","Economy")
gdp <- read.csv("./data/gdp.csv", skip=4,header=F, stringsAsFactors = F)[1:4]
names(gdp) <- c("CountryCode", "Ranking","Country","Economy")
head(gdp)
gdp <- read.csv("./data/gdp.csv", skip=4,header=F, stringsAsFactors = F)[1:2,4,5]
names(gdp) <- c("CountryCode", "Ranking","Country","Economy")
gdp <- read.csv("./data/gdp.csv", skip=4,header=T, stringsAsFactors = F)
head(gdp)
gdp <= gdp["X", "X.1"]
head(gdp)
gdp <- gdp["X", "X.1"]
head(gdp)
gdp <- gdp"X, X.1]
names(gdp) <- c("CountryCode", "Ranking","Country","Economy")
head(gdp)
gdp <- gdp[X, X.1]
gdp <- gdp[gdp$X, gdp$X.1]
gdp <- gdp(X, X.1)
gdp <- gdp[c(X, X.1)]
names(gdp)
gdp <- read.csv("./data/gdp.csv", skip=4,header=T, stringsAsFactors = F)
names(gdp)
gdp <- gdp[c(X, X.1)]
gdp <- gdp[c("X", "X.1")]
head(gdp)
gdp <- gdp[c("X", "X.1", "X.3", "X.4")]
gdp <- read.csv("./data/gdp.csv", skip=4,header=T, stringsAsFactors = F)
names(gdp)
head(gpd)
head(gdp)
gdp <- gdp[c("X", "X.1", "X.3", "X.4")]
names(gdp) <- c("CountryCode", "Ranking","Country","Economy")
head(gdp)
gsub("_","",gdp$Economy)
head(gdp)
mutate(gsub$Economy = gsub(",","",gdp$Economy))
gsub(",","",gdp$Economy)
head(gdp)
gdp$Economy<-gsub(",","",gdp$Economy)
head(gdp)
mean(gdp$Economy)
mean?
?mean
?mean
mean(gdp$Economy, na.rm=T)
mean(as.numeric(gdp$Economy), na.rm=T)
gdp$Economy<-as.numric(gsub(",","",gdp$Economy))
gdp$Economy<-as.numeric(gsub(",","",gdp$Economy))
head(gdp)
tail(gdp)
gdp <- read.csv("./data/gdp.csv", skip=4,header=T, stringsAsFactors = F)
gdp <- gdp[c("X", "X.1", "X.3", "X.4")]
names(gdp) <- c("CountryCode", "Ranking","Country","Economy")
gdp <- gdp[complete.cases(gdp),1]
gdp <- gdp[complete.cases(gdp),]
complete.cases(gdp)
gdp[complete.cases(gdp),]
names(gdp) <- c("CountryCode", "Ranking","Country","Economy")
head(gdp)
gdp <- read.csv("./data/gdp.csv", skip=4,header=T, stringsAsFactors = F)
gdp <- gdp[c("X", "X.1", "X.3", "X.4")]
names(gdp) <- c("CountryCode", "Ranking","Country","Economy")
gdp <- gdp[complete.cases(gdp),]
gdp$Economy<-as.numeric(gsub(",","",gdp$Economy))
gdp <- read.csv("./data/gdp.csv", skip=4,header=T, stringsAsFactors = F)
names(gdp)
head(gdp)
gdp <- gdp[c("X", "X.1", "X.3", "X.4")]
names(gdp) <- c("CountryCode", "Ranking","Country","Economy")
gdp <- gdp[complete.cases(gdp),]
tail(gdp)
gdp <- read.csv("./data/gdp.csv", skip=4,header=T, stringsAsFactors = F, na.strings="")
names(gdp)
head(gdp)
gdp <- gdp[c("X", "X.1", "X.3", "X.4")]
names(gdp) <- c("CountryCode", "Ranking","Country","Economy")
gdp <- gdp[complete.cases(gdp),]
tail(gdp)
gdp$Economy<-as.numeric(gsub(",","",gdp$Economy))
tail(gdp)
mean(as.numeric(gdp$Economy), na.rm=T)
grep("^United",countryNames)
grep("^United",gdp$CountryCode)
grep("^United",gdp$CountryCode)
grep("^United",gdp$Country)
edu <- read.csv("./data/edu.csv", header =T,na.strings="",stringsAsFactors = FALSE)
mergedData <- merge(gdp, edu, by.x = "CountryCode", by.y="CountryCode", all=F)
head(mergedData)
names(mergedData)
mergedData <- mergedData[!is.na(mergedData$Special.Notes),]
head(mergedData$Special.Notes)
fiscal <- mergedData[grepl(mergedData$Special.Notes, "[Ff]iscal"),]
fiscal <- mergedData[grepl("[Ff]iscal",mergedData$Special.Notes),]
head(fiscal)
june <- fiscal[grepl("end:  June",fiscal$Special.Notes),]
june
head(fiscal)
june <- fiscal[grepl("end:  June",fiscal$Special.Notes),]
june
head(june)
length(june[1])
june[1]
june[2]
length(june[,1])
june <- fiscal[grepl(".end:  June",fiscal$Special.Notes),]
length(june[,1])
