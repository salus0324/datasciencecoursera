R <- c(455,525,279,281,269,259,71,229,61,512,150,261,646,32,112,87,344,344,344,344,357,273,273,266)
boxplot(R)
summary(R)
R <- c(455,525, 281,269,259,71,229,61,512,150,261,646,32,112,87,344, 357,273,273,266)
boxplot(R)
summary(R)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
debug(cachemean)
cachemena([1,2,3])
cachemean([1,2,3])
cachemean(c(1,2,3)
)
x <- c(1,2,3)
class(x)
makekeVector()
makeVector()
debug(cachemean)
cachemean(x)
debug(makeVector)
?makeVector
makeVector(x)
debug(cachemean)
cachemean(makeVector(x))
cachemean(makeVector(x))
cachemean(makeVector(x))
debug(cachemean)
cachemean(makeVector(x))
cachemean(makeVector(x))
cachemean()
undebug(cachemean)
test <- makeVector(x)
undebug(makeVector)
test <- makeVector(x)
test
cachemean(test)
cachemean(test)
cachemean(test)
cachemean()
test
debug(cachemean)
test2 <- c(13,24,11)
cachemean(test)
cachemean(test2)
cachemean(makeVector(test2))
debug(makeVector)
cachemean(makeVector(test2))
debug(makeCacheMatrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y = matrix()){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<-inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setmean,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
debug(makeCacheMatrix)
x <- matrix(1:4, nrow=2, ncol=2)
makeCacheMatrix(x)
makeCacheMatrix(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y = matrix()){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<-inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Default value for inverse matrix i
i <- NULL
# set the input matrix
set <- function(y = matrix()){
x <<- y
i <<- NULL
}
# get input the matrix
get <- function() x
# set the inverse matrix
setinverse <- function(inverse) i <<-inverse
# get the inverse matrix
getinverse <- function() i
# return the list of functions that would be used for cacheSolve function below
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Default value for inverse matrix i
i <- NULL
# set the input matrix
set <- function(y = matrix()){
x <<- y
i <<- NULL
}
# get input the matrix
get <- function() x
# set the inverse matrix
setinverse <- function(inverse) i <<-inverse
# get the inverse matrix
getinverse <- function() i
# return the list of functions that would be used for cacheSolve function below
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- Solve(data, ...)
x$setinverse(i)
i
}
debug(cacheSolve, makeCacheMatrix)
x <- matrix(1:9, nrow=3, ncol=3)
cacheSolve(makeCacheMatrix(x))
?inv
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Default value for inverse matrix i
i <- NULL
# set the input matrix
set <- function(y = matrix()){
x <<- y
i <<- NULL
}
# get input the matrix
get <- function() x
# set the inverse matrix
setinverse <- function(inverse) i <<-inverse
# get the inverse matrix
getinverse <- function() i
# return the list of functions that would be used for cacheSolve function below
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
?solve
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Default value for inverse matrix i
i <- NULL
# set the input matrix
set <- function(y = matrix()){
x <<- y
i <<- NULL
}
# get input the matrix
get <- function() x
# set the inverse matrix
setinverse <- function(inverse) i <<-inverse
# get the inverse matrix
getinverse <- function() i
# return the list of functions that would be used for cacheSolve function below
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
debug(makeCacheMatrix, cacheSolve)
x <- matrix(1:9, nrow=3, ncol=3)
cacheSolve(makeCacheMatrix(x))
x
solve(x)
class(x)
x <- matrix(1:4, nrow=2, ncol=2)
solve(x)
cacheSolve(makeCacheMatrix(x))
cacheSolve(makeCacheMatrix(x))
input <- makeCacheMatrix(x)
cacheSolve(input)
cacheSolve(input)
cacheSolve(input)
x <- matrix(8:17, nrow=3, ncol=3)
x <- matrix(8:16, nrow=3, ncol=3)
input <- makeCacheMatrix(x)
cacheSolve(input)
input
cacheSolve(input)
x <- matrix(c(10,4,7,2,5,8,3,6,9), nrow=3, ncol=3)
input <- makeCacheMatrix(x)
cacheSolve(input)
cacheSolve(input)
getwd()
setwd("C:\Users\kshim\Documents\Coursera\R"")
setwd("C:\Users\kshim\Documents\Coursera\R")
setwd("C:/Users/kshim/Documents/Coursera/R")
